name: Endpoints
description: ''
endpoints:
  -
    httpMethods:
      - POST
    uri: api/getToken
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: ''
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      email:
        name: email
        description: 'Must be a valid email address.'
        required: true
        example: mupton@example.net
        type: string
        custom: []
      password:
        name: password
        description: ''
        required: true
        example: inventore
        type: string
        custom: []
    cleanBodyParameters:
      email: mupton@example.net
      password: inventore
    fileParameters: []
    responses: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/v1/generate
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: ''
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_BEARER_TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
              "data": {
                  "captchaImg": {
                      "images": [
                          {
                              "src" : "image0inbase64"
                          },
                          {
                              "src" : "image1inbase64"
                          },
                          {
                              "src" : "image2inbase64"
                          },
                          {
                              "src" : "image3inbase64"
                          },
                          {
                              "src" : "image4inbase64"
                          },
                          {
                              "src" : "image5inbase64"
                          },
                          {
                              "src" : "image6inbase64"
                          },
                          {
                              "src" : "image7inbase64"
                          },
                          {
                              "src" : "image8inbase64"
                          },
                          {
                              "src" : "image9inbase64"
                          }
                      ],
                      "solution": "eyJpdiI6ImtkS3BaaXExZmlDOUxwVDEzZ01Fb1E9PSIsInZhbHVlIjoiYkxQcjNpU3gxcjhDRnB==",
                      "target": "umbrella",
                      "keyNumber": 4
                  },
                  "proofOfWorkDetails": {
                      "fixedStrings": [
                          "e90eba67bade315aa6535a",
                          "8fb32a74dccc2ffb11918",
                          "30a89cc70a1e17010c5bd"
                      ],
                      "difficulty": "00"
                  }
              }
          }
        headers: []
        description: ''
        custom: []
    responseFields:
      captchaImg:
        name: captchaImg
        description: 'Contains all information to create captcha image'
        required: false
        example: null
        type: object
        custom: []
      src:
        name: src
        description: 'Image in base64 format'
        required: false
        example: null
        type: string
        custom: []
      solution:
        name: solution
        description: 'Captcha image solution'
        required: false
        example: null
        type: string
        custom: []
      keyNumber:
        name: keyNumber
        description: 'Number of key used to encrypt the solution'
        required: false
        example: null
        type: integer
        custom: []
      proofOfWorkDetails:
        name: proofOfWorkDetails
        description: 'Contains all info rmation to create proof of work'
        required: false
        example: null
        type: object
        custom: []
      fixedString:
        name: fixedString
        description: 'Array of string to be used in proof of work as fixed part'
        required: false
        example: null
        type: 'string[]'
        custom: []
      difficulty:
        name: difficulty
        description: "Number of diffulty's zeros"
        required: false
        example: null
        type: integer
        custom: []
    auth:
      - headers
      - Authorization
      - 'Bearer a6ched18ZaP45bgED6fkVv3'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/verify
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: ''
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_BEARER_TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      response:
        name: response
        description: 'The user response to the captcha challenge: 0 to the images unclicked, 1 to the images clicked. Must match the regex /^(0|1){10}$/.'
        required: true
        example: '1011000101'
        type: string
        custom: []
      solution:
        name: solution
        description: 'The encrypted solution to the captcha challenge, passed as api/v1/generate response .'
        required: true
        example: eyJpdiI6InNqNU9Fd0NkVUtEMDVsSDUyMjh5c1E9PSIsInZhbHVlIjoib3lqb2dNY0NBWjNYSWhsWUJZeVJXNTcreEVURkdZamovbWVIb3h
        type: string
        custom: []
      keyNumber:
        name: keyNumber
        description: 'The number of the key used to encrypt the solution, passed as api/v1/generate response . Must be at least 0. Must not be greater than 19.'
        required: true
        example: 6
        type: integer
        custom: []
      fixedStrings:
        name: fixedStrings
        description: 'The array composed of the three parts of the hashed id of the captcha, passed as api/v1/generate response.'
        required: true
        example:
          - 961fa7b4bc6af6f447ecd0
          - 0635c63aadef1d4a1fd13
          - a51133975c8b385275f24
        type: 'string[]'
        custom: []
      nonces:
        name: nonces
        description: 'The array of characters that resolves the proof of work for the different fixed strings.'
        required: true
        example:
          - 12cd
          - 23dwq
          - 65faa
        type: 'string[]'
        custom: []
    cleanBodyParameters:
      response: '1011000101'
      solution: eyJpdiI6InNqNU9Fd0NkVUtEMDVsSDUyMjh5c1E9PSIsInZhbHVlIjoib3lqb2dNY0NBWjNYSWhsWUJZeVJXNTcreEVURkdZamovbWVIb3h
      keyNumber: 6
      fixedStrings:
        - 961fa7b4bc6af6f447ecd0
        - 0635c63aadef1d4a1fd13
        - a51133975c8b385275f24
      nonces:
        - 12cd
        - 23dwq
        - 65faa
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
              "userClass": "human",
              "time": 1234567890
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer aDkEZhdc615vfVg36e8baP4'
    controller: null
    method: null
    route: null
    custom: []
